name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  test:
    name: Run Tests
    runs-on: macos-15

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.4.app

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Cache derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-derived-data-${{ hashFiles('**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-derived-data-

      - name: Run unit tests
        run: |
          set -o pipefail
          xcodebuild test \
            -project TimeRabbit.xcodeproj \
            -scheme TimeRabbit \
            -destination 'platform=macOS' \
            -testPlan TimeRabbitTests \
            -enableCodeCoverage YES \
            | tee test-output.log

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-output.log
          retention-days: 30

  build-and-release:
    name: Build and Release
    runs-on: macos-15
    needs: test
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.4.app

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Cache derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-derived-data-release-${{ hashFiles('**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-derived-data-release-

      - name: Build Release
        run: |
          set -o pipefail
          xcodebuild archive \
            -project TimeRabbit.xcodeproj \
            -scheme TimeRabbit \
            -configuration Release \
            -archivePath ${{ runner.temp }}/TimeRabbit.xcarchive \
            CODE_SIGN_IDENTITY="-"

      - name: Export app
        run: |
          xcodebuild -exportArchive \
            -archivePath ${{ runner.temp }}/TimeRabbit.xcarchive \
            -exportPath ${{ runner.temp }}/export \
            -exportOptionsPlist exportOptions.plist

      - name: Verify code signature
        run: |
          echo "=== Verifying code signature ==="
          codesign -dv --verbose=4 ${{ runner.temp }}/export/TimeRabbit.app 2>&1 || true
          echo ""
          echo "=== Verifying signature validity ==="
          codesign --verify --verbose=4 ${{ runner.temp }}/export/TimeRabbit.app 2>&1 || true
          echo ""
          echo "=== Checking executable ==="
          file ${{ runner.temp }}/export/TimeRabbit.app/Contents/MacOS/TimeRabbit

      - name: Create ZIP archive
        run: |
          cd ${{ runner.temp }}/export
          ditto -c -k --sequesterRsrc --keepParent TimeRabbit.app TimeRabbit-${{ steps.version.outputs.version }}.zip
          shasum -a 256 TimeRabbit-${{ steps.version.outputs.version }}.zip > TimeRabbit-${{ steps.version.outputs.version }}.zip.sha256

      - name: Create DMG
        run: |
          chmod +x ./scripts/create-dmg.sh
          ./scripts/create-dmg.sh \
            ${{ runner.temp }}/export/TimeRabbit.app \
            ${{ runner.temp }}/export/TimeRabbit-${{ steps.version.outputs.version }}.dmg

      - name: Generate release notes
        id: release_notes
        run: |
          # 前回のタグからの変更を取得
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s" --no-merges)
          else
            CHANGES=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s" --no-merges)
          fi

          cat << EOF > release_notes.md
          ## Changes

          $CHANGES

          ## ⚠️ macOS Gatekeeper Warning

          ### If you see "app is damaged and can't be opened" error:

          This application is not signed with an Apple Developer certificate. If macOS shows an error message saying the app is damaged, follow these steps:

          #### Solution 1: Remove quarantine attribute (Recommended)
          1. Open Terminal
          2. Run the following command:
             \`\`\`bash
             xattr -cr /Applications/TimeRabbit.app
             \`\`\`
             (Replace \`/Applications/TimeRabbit.app\` with the actual path to your app)
          3. Try opening the app again

          #### Solution 2: Use System Settings (macOS Ventura or later)
          1. Try to open the app (you will see an error)
          2. Go to **System Settings** → **Privacy & Security**
          3. Scroll down to the **Security** section
          4. Click **"Open Anyway"** next to the TimeRabbit message
          5. Click **"Open"** in the confirmation dialog

          #### Why does this happen?

          This is a macOS security feature for unsigned applications downloaded from the internet. The app is safe to use - you can verify the integrity using the SHA256 checksum provided below.

          ## Installation

          ### Option 1: Using ZIP file (Recommended)
          1. Download \`TimeRabbit-${{ steps.version.outputs.version }}.zip\`
          2. Extract the zip file
          3. Move \`TimeRabbit.app\` to your Applications folder
          4. **Important:** Follow the Gatekeeper warning instructions above before first launch

          ### Option 2: Using DMG file
          1. Download \`TimeRabbit-${{ steps.version.outputs.version }}.dmg\`
          2. Open the DMG file
          3. Drag \`TimeRabbit.app\` to the Applications folder
          4. **Important:** Follow the Gatekeeper warning instructions above before first launch

          ## Checksums

          \`\`\`
          $(cat ${{ runner.temp }}/export/TimeRabbit-${{ steps.version.outputs.version }}.zip.sha256)
          \`\`\`
          EOF

          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: TimeRabbit v${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            ${{ runner.temp }}/export/TimeRabbit-${{ steps.version.outputs.version }}.zip
            ${{ runner.temp }}/export/TimeRabbit-${{ steps.version.outputs.version }}.zip.sha256
            ${{ runner.temp }}/export/TimeRabbit-${{ steps.version.outputs.version }}.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
